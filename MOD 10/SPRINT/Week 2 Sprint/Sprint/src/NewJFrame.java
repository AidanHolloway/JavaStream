package src;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aidan
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    public static String currTable = "";
    public static String currButton = "";
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnLearnerTbl = new javax.swing.JButton();
        btnParentTbl = new javax.swing.JButton();
        btnTeacherTbl = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(475, 475, 475)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addGap(0, 104, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 957, Short.MAX_VALUE)
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCreate.setText("Update");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreate)
                    .addComponent(btnDelete)
                    .addComponent(btnInsert)
                    .addComponent(btnSearch))
                .addGap(46, 46, 46))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnSearch)
                .addGap(29, 29, 29)
                .addComponent(btnInsert)
                .addGap(33, 33, 33)
                .addComponent(btnDelete)
                .addGap(31, 31, 31)
                .addComponent(btnCreate)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        btnLearnerTbl.setText("Learners");
        btnLearnerTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearnerTblActionPerformed(evt);
            }
        });

        btnParentTbl.setText("Parents");
        btnParentTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParentTblActionPerformed(evt);
            }
        });

        btnTeacherTbl.setText("Teachers");
        btnTeacherTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherTblActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(btnLearnerTbl)
                .addGap(62, 62, 62)
                .addComponent(btnParentTbl)
                .addGap(69, 69, 69)
                .addComponent(btnTeacherTbl)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLearnerTbl)
                    .addComponent(btnParentTbl)
                    .addComponent(btnTeacherTbl))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
            switch (LogInForm.accessLevel) {
                case "Parent":
                btnCreate.setVisible(false); 
                btnDelete.setVisible(false); 
                btnInsert.setVisible(false); 
                btnParentTbl.setVisible(false); 
                btnSearch.setVisible(false); 
                btnTeacherTbl.setVisible(false); 
                    break;
                case "Teacher":
                btnCreate.setVisible(false); 
                btnDelete.setVisible(false); 
                btnInsert.setVisible(false); 
                    break;
                case "Admin":
                    
                    break;
                default:
                    break;
            }
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchID(1, currTable);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
       currButton = "Insert";
        switch (currTable) {
           case "Learner":
               InputFrame learnerInputForm = new InputFrame();
               learnerInputForm.setVisible(true);
                    
               break;
               case "Parent":
               parentInput parentform = new parentInput();
               parentform.setVisible(true);
                    
               break;
               case "Teacher":
               teacherInput teacherform = new teacherInput();
               teacherform.setVisible(true);
                    
               break;
           default:
               break;
       }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        deleteRecord(0, currTable);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnLearnerTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLearnerTblActionPerformed
        // TODO add your handling code here:
       currTable = "Learner"; 
       if(LogInForm.accessLevel.equals("Parent")){
        parentPrint(LogInForm.parentId);
       }
       else{
        printAll(currTable);
    }
        System.out.println(LogInForm.accessLevel);
    }//GEN-LAST:event_btnLearnerTblActionPerformed

    private void btnParentTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParentTblActionPerformed
        // TODO add your handling code here:
        currTable = "Parent";
        printAll(currTable);
    }//GEN-LAST:event_btnParentTblActionPerformed

    private void btnTeacherTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherTblActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTeacherTblActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLearnerTbl;
    private javax.swing.JButton btnParentTbl;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTeacherTbl;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private static javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    
    private static void printAll(String tableType) {
        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerdetails";
                break;
        case "Parent":
                tableName = "parentdetails";
                break;
        case "Teacher":
                tableName = "teacherdetails";
                break;
        
            default:
                break;
        } 

        Connection conn = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
    
                String sql = "SELECT * FROM " + tableName;
    
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery(sql);
    
                DefaultTableModel model = null;
    
                if(result.next()){
                    int res = result.getInt(1);
                    if(res == 1){
                        sql = "SELECT * FROM " + tableName;
                        stmt = conn.createStatement();
                        ResultSet result2 = stmt.executeQuery(sql);


                        String idNo = "";
                            String name = "";
                            String surname = "";

                        switch (tableType) {
                            case "Learner":
                            model = new DefaultTableModel(new String[]{"ID", "Learner Name", "Surname",
                            "Date of Birth", "Gender", "Grade"}, 0);
                            
                            
                            String dateOBirth = "";
                            String gender = "";
                            String grade = "";


                            while(result2.next()){
                                idNo = result2.getString("ID");
                                name = result2.getString("Names");
                                surname = result2.getString("Surname");
                                dateOBirth = result2.getString("DateOfBirth");
                                gender = result2.getString("Gender");
                                grade = result2.getString("Grade");
                                model.addRow(new Object[]{idNo, name, surname, dateOBirth, gender, grade});
                            }
                        
                            jTable2.setModel(model);
              


                                break;
                        case "Parent":

                        model = new DefaultTableModel(new String[]{"ID", "Parent Name", "Surname",
                        "Contact Number", "Address", "Number Of Children"}, 0);

                        while(result2.next()){
                            idNo = result2.getString("ID");
                            name = result2.getString("Names");
                            surname = result2.getString("Surname");
                            String contacts = result2.getString("ContactNum");
                            String address = result2.getString("Address");
                            String numChildren = result2.getString("NumOfChildren");
                            model.addRow(new Object[]{idNo, name, surname, contacts, address, numChildren});
                        }
                    
                        jTable2.setModel(model);
          
           
                        break;
                        case "Teacher":
                                tableName = "teacherDetails";
                                break;
                        
                            default:
                                break;
                        } 
                        
            
            
                    }
                    else {
                       JOptionPane.showMessageDialog(null, "The record could not be found."); 
                    }
                }
                    conn.close();
               
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "An error has occurred.");
                ex.printStackTrace();
            }  
        /*
        Connection conn = null;
        String databaseName = "testschool";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + databaseName,"root","root");
            String sql = "SELECT parent_name, learner_id, learner_name " + 
            "FROM testschool.parent_tbl " +
            "INNER JOIN learner_tbl ON parent_tbl.parent_id = learner_tbl.parent_id";

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);


            DefaultTableModel model = new DefaultTableModel(new String[]{"Learner Name", "Parent Name", "LearnerId"}, 0);
            
            while(result.next())
            {
                String d = result.getString("parent_name");
                String e = result.getString("learner_name");
                //String f = result.getString("parent_id");
                String g = String.valueOf(result.getInt("learner_id"));
                model.addRow(new Object[]{d, e, g});
            }
             
          
           jTable2.setModel(model);
           
        } catch (Exception e) {
            //TODO: handle exception
            e.printStackTrace();
        }
    */}

    private static void parentPrint(int parentId){
        Connection conn = null;
      //  String databaseName = "testschool";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
           /* String sql = "SELECT parent_name, learner_id, learner_name " + 
            "FROM testschool.parent_tbl " +
            "INNER JOIN learner_tbl ON parent_tbl.parent_id = learner_tbl.parent_id";*/
            String sql = "SELECT ID, ParentID, Names, Surname, DateOfBirth, Gender, Grade FROM learnerDetails " + 
                "WHERE(ParentID = " + parentId +")";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);


          /*  DefaultTableModel model = new DefaultTableModel(new String[]{"Learner ID", "Parent Name", "LearnerId", "Learner ID", "Parent Name", "LearnerId"}, 0);
          //  ID, Names, Surname, DateOfBirth, Gender, Grade, ParentID
            while(result.next())
            {
                String d = result.getString("parent_name");
                String e = result.getString("learner_name");
                //String f = result.getString("parent_id");
                String g = String.valueOf(result.getInt("learner_id"));
                model.addRow(new Object[]{d, e, g});
            }
            */ 
            DefaultTableModel model = new DefaultTableModel(new String[]{"Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"}, 0);
            
                
               // ID, Names, Surname, DateOfBirth, Gender, Grade, ParentID
               // ID, Names, Surname, ContactNum, Address, NumOfChildren
            while(result.next()) {
                String learnerID = String.valueOf(result.getInt("ID"));
                String parentID = String.valueOf(result.getInt("ParentID"));
                String name = result.getString("Names");
                String surname = result.getString("Surname");
                String birthdate = result.getString("DateOfBirth");
                String gender = result.getString("Gender");
                String grade = String.valueOf(result.getInt("Grade"));
                model.addRow(new Object[]{learnerID, parentID, name, surname, birthdate, gender, grade});
            }

           jTable2.setModel(model);
           
        } catch (Exception e) {
            //TODO: handle exception
            e.printStackTrace();
        }
    }

    /////DELETE METHOD
    private static void deleteRecord(int idNum, String tableType){
        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerDetails";
                break;
        case "Parent":
                tableName = "parentDetails";
                break;
        case "Teacher":
                tableName = "teacherDetails";
                break;
        
            default:
                break;
        } 
        
        Connection conn = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
    
                String sql = "SELECT COUNT(1) FROM " + tableName + " WHERE(ID = " + idNum + ")";
    
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery(sql);
    
                
    
                if(result.next()){
                    int res = result.getInt(1);
                    if(res == 1){
                        sql = "DELETE FROM " + tableName + " WHERE(ID = " + idNum + ")";
                        stmt = conn.createStatement();
                        int i = stmt.executeUpdate(sql);
                        JOptionPane.showMessageDialog(null, String.valueOf(i) + " was deleted.");
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "The record could not be found.");
                    }
                }
                    conn.close();
                } catch (SQLException | ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(null, "An error has occurred.");
                    ex.printStackTrace();
                }  
    
    }

    

    //////////////Search
    private static void searchID(int idNum, String tableType){

        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerDetails";
                break;
        case "Parent":
                tableName = "parentDetails";
                break;
        case "Teacher":
                tableName = "teacherDetails";
                break;
        
            default:
                break;
        } 

        Connection conn = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
    
                String sql = "SELECT COUNT(1) FROM " + tableName + " WHERE(ID = " + idNum + ")";
    
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery(sql);
    
                
    
                if(result.next()){
                    int res = result.getInt(1);
                    if(res == 1){
                        sql = "SELECT * FROM " + tableName + " WHERE(ID = " + idNum + ")";
                        stmt = conn.createStatement();
                        ResultSet result2 = stmt.executeQuery(sql);
                        switch (tableType) {
                            case "Learner":
                                tableName = "learnerDetails";
                                break;
                        case "Parent":

                        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Parent Name", "Surname",
                        "Contact Number", "Address", "Number Of Children"}, 0);

                        while(result2.next()){
                            String idNo = result2.getString("ID");
                            String name = result2.getString("Names");
                            String surname = result2.getString("Surname");
                            String contacts = result2.getString("ContactNum");
                            String address = result2.getString("Address");
                            String numChildren = result2.getString("NumOfChildren");
                            model.addRow(new Object[]{idNo, name, surname, contacts, address, numChildren});
                        }
                    
                        jTable2.setModel(model);
          
           
                        break;
                        case "Teacher":
                                tableName = "teacherDetails";
                                break;
                        
                            default:
                                break;
                        } 
                        
            
            
                    }
                    else {
                       JOptionPane.showMessageDialog(null, "The record could not be found."); 
                    }
                }
                    conn.close();
               
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "An error has occurred.");
                ex.printStackTrace();
            }  
    }


    /////////////IS NULL
    public static boolean isNull(String var) {
        if ((var == null) || (var != null && ("".equals(var)) )) {
            return true;
        }

        return false;
    }


    ////////////READ IN LEARNER

    public static void readInLearner(String name, String surname, String dob, String gender, String grade, String parentID){
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");

           // String name = JOptionPane.showInputDialog(null, "Enter Student Name");

            if (isNull(name) == true) {
                return;
            }

          //  String surname = JOptionPane.showInputDialog(null, "Enter Student Surname");

            if (isNull(surname) == true) {
                return;
            }
            
          //  String dob = JOptionPane.showInputDialog(null, "Enter Student Date of Birth");

            if (isNull(dob) == true) {
                return;
            }

         //   String gender = JOptionPane.showInputDialog(null, "Enter Student Gender");

            if (isNull(gender) == true) {
                return;
            }

         //   String grade = JOptionPane.showInputDialog(null, "Enter Student Grade");

            if (isNull(grade) == true) {
                return;
            }
           
            if(isNull(parentID) == true){
                return;
            }

            PreparedStatement stmt=conn.prepareStatement("INSERT INTO learnerDetails(Names, Surname, DateOfBirth, Gender, Grade, ParentID) VALUES(?,?,?,?,?)");
            stmt.setString(1, name);
            stmt.setString(2, surname);
            stmt.setString(3, dob);
            stmt.setString(4, gender);
            stmt.setString(5, grade);
            stmt.setString(6, parentID);
            
            int i=stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, i + " records inserted");
            conn.close();
             
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "An error has occurred");
            ex.printStackTrace();
        }

    }

    ////////////LOGIN FORM
    /*public static String isAdmin(String userNAME, String passWORD) {
        String answer = "";
    
         if(passWORD.equals("password") && userNAME.equals("username")){
                answer = "yes";
            }        
            else{
                answer = "no";
            }
    
         return answer;
        }
*/


        public static String logInSearch(String userNAME, String passWORD, String searchTable){

            if(userNAME.equals("admin") && passWORD.equals("admin")){
                return "Admin";
            }

            Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");

            String tableName = "";
        switch (searchTable) {
            
        case "Parent":
                tableName = "parentdetails";
                break;
        case "Teacher":
                tableName = "teacherdetails";
                break;
        case "Admin":
                JOptionPane.showMessageDialog(null, "Invalid username", "Access Denied", 0);
                return "Denied";
          //  break;
            default:
            return "Denied";
                //break;
        } 


            String sql = "SELECT COUNT(1) FROM " + tableName + " WHERE Username = '" + userNAME  + "' AND Password = '" + passWORD + "'";

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            if(result.next()){
                int res = result.getInt(1);
                if(res == 1){
                    if(tableName.equals("parentdetails")){
                        return "Parent";
                    }
                    else if (tableName.equals("teacherdetails")){
                        return "Teacher";
                    }
                }

            else {
                return "Denied"; 
             }
         }
             conn.close();
        }
     catch (SQLException | ClassNotFoundException ex) {
         JOptionPane.showMessageDialog(null, "An error has occurred.");
         ex.printStackTrace();
     }  
     return "Denied";
        }
}

