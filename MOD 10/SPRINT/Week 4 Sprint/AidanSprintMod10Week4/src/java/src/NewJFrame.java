package src;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aidan
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    public static String currTable = "";
    public static String currButton = "";
    public static boolean bClicked = false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnLearnerTbl = new javax.swing.JButton();
        btnParentTbl = new javax.swing.JButton();
        btnTeacherTbl = new javax.swing.JButton();
        cmbSorttbl = new javax.swing.JComboBox<>();
        btnLearnersSub = new javax.swing.JButton();
        rgbAgeFoundation = new javax.swing.JRadioButton();
        rgbAgeIntermediate = new javax.swing.JRadioButton();
        rgbAgeSenior = new javax.swing.JRadioButton();
        lblAgeCat = new javax.swing.JLabel();
        rgbAllAges = new javax.swing.JRadioButton();
        prgEnrolled = new javax.swing.JProgressBar();
        lblProgressBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreate)
                    .addComponent(btnDelete)
                    .addComponent(btnInsert)
                    .addComponent(btnSearch))
                .addGap(40, 40, 40))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnSearch)
                .addGap(29, 29, 29)
                .addComponent(btnInsert)
                .addGap(33, 33, 33)
                .addComponent(btnDelete)
                .addGap(31, 31, 31)
                .addComponent(btnCreate)
                .addContainerGap(449, Short.MAX_VALUE))
        );

        btnLearnerTbl.setText("Learners");
        btnLearnerTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearnerTblActionPerformed(evt);
            }
        });

        btnParentTbl.setText("Parents");
        btnParentTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParentTblActionPerformed(evt);
            }
        });

        btnTeacherTbl.setText("Teachers");
        btnTeacherTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherTblActionPerformed(evt);
            }
        });


        cmbSorttbl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by ID", "First Name", "Surname"}));
        cmbSorttbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSorttblActionPerformed(evt);
            }
        });

        btnLearnersSub.setText("Detailed Learner Info");
        btnLearnersSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearnersSubActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(cmbSorttbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnLearnerTbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 851, Short.MAX_VALUE)
                .addComponent(btnLearnersSub, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnParentTbl)
                .addGap(54, 54, 54)
                .addComponent(btnTeacherTbl))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLearnersSub, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLearnerTbl)
                        .addComponent(btnParentTbl)
                        .addComponent(btnTeacherTbl)
                        .addComponent(cmbSorttbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38))
        );

        buttonGroup1.add(rgbAgeFoundation);
        rgbAgeFoundation.setText("6 - 9");
        rgbAgeFoundation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbgAgeFoundationActionPerformed(evt);
            }
        });

        buttonGroup1.add(rgbAgeIntermediate);
        rgbAgeIntermediate.setText("10 - 14");
        rgbAgeIntermediate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbAgeIntermediateActionPerformed(evt);
            }
        });

        buttonGroup1.add(rgbAgeSenior);
        rgbAgeSenior.setText("15 - 17");
        rgbAgeSenior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbAgeSeniorActionPerformed(evt);
            }
        });

        lblAgeCat.setText("Select Age Group");

        buttonGroup1.add(rgbAllAges);
        rgbAllAges.setText("All");
        rgbAllAges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbAllAgesActionPerformed(evt);
            }
        });

        lblProgressBar.setText("Currently Enrolled % of Total Applicants");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(579, 579, 579)
                        .addComponent(lblProgressBar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(prgEnrolled, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rgbAgeFoundation)
                            .addComponent(rgbAgeIntermediate)
                            .addComponent(rgbAgeSenior)
                            .addComponent(lblAgeCat)
                            .addComponent(rgbAllAges))
                        .addGap(36, 36, 36))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAgeCat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rgbAllAges)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rgbAgeFoundation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rgbAgeIntermediate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rgbAgeSenior)))
                        .addGap(18, 18, 18)
                        .addComponent(lblProgressBar)
                        .addGap(2, 2, 2)
                        .addComponent(prgEnrolled, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        
        lblAgeCat.setVisible(false);
        lblProgressBar.setVisible(false);

        rgbAgeIntermediate.setVisible(false);
        rgbAgeSenior.setVisible(false);
        rgbAllAges.setVisible(false);
        rgbAgeFoundation.setVisible(false);

        prgEnrolled.setVisible(false);

        int i = 86; //(86 uit 100)
        try {
            prgEnrolled.setValue(i);
        } catch (Exception e) {
            
        }
            switch (LogInForm.accessLevel) {
                case "Parent":
                btnCreate.setVisible(false); 
                btnDelete.setVisible(false); 
                btnInsert.setVisible(false); 
                btnParentTbl.setVisible(false); 
                btnSearch.setVisible(false); 
                btnTeacherTbl.setVisible(false); 
                    break;
                case "Teacher":
                btnCreate.setVisible(false); 
                btnDelete.setVisible(false); 
                btnInsert.setVisible(false);
                btnTeacherTbl.setVisible(false);  
                    break;
                case "Admin":
                    
                    break;
                default:
                    break;
            }

            currTable = "Learner"; 
       if(LogInForm.accessLevel.equals("Parent")){
        parentPrint(LogInForm.parentId);
       }
       else{
        printAll(currTable, cmbSorttbl.getSelectedIndex());
    }

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSorttblActionPerformed(java.awt.event.ActionEvent evt) {                                           
        
        int rgbClicked = -1;
        

        if(rgbAllAges.isSelected()){
            rgbClicked = 0;
        }
        else if(rgbAgeFoundation.isSelected()){
            rgbClicked = 1;
        }
        else if(rgbAgeIntermediate.isSelected()){
            rgbClicked = 2;
        }
        else if(rgbAgeSenior.isSelected()){
            rgbClicked = 3;
        }
        
        switch (cmbSorttbl.getItemAt(cmbSorttbl.getSelectedIndex())) {
            case "Sort by ID":
                if(bClicked){
                    printDetailed(rgbClicked, cmbSorttbl.getSelectedIndex());
                }
                else if(LogInForm.accessLevel.equals("Parent")){
                  sortParentPrint(LogInForm.parentId, "ID");  
                }
                else{
                    sortPrintAll(currTable, "ID");
                }
                break;
                case "First Name":
                if(bClicked){
                    printDetailed(rgbClicked, cmbSorttbl.getSelectedIndex());
                }
                else if(LogInForm.accessLevel.equals("Parent")){
                    sortParentPrint(LogInForm.parentId, "Name");  
                  }
                  else{
                      sortPrintAll(currTable, "Name");
                  }
                  break;
                case "Surname":
                if(bClicked){
                    printDetailed(rgbClicked, cmbSorttbl.getSelectedIndex());
                }
                else if(LogInForm.accessLevel.equals("Parent")){
                    sortParentPrint(LogInForm.parentId, "Surname");  
                  }
                  else{
                      sortPrintAll(currTable, "Surname");
                  }
                  break;
            default:
                break;
        }

    }  

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        int idSearch = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter the ID of the record you want to print the details out from:"));
        searchID(idSearch, currTable);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        
       currButton = "Insert";
        switch (currTable) {
           case "Learner":
               InputFrame learnerInputForm = new InputFrame();
               learnerInputForm.setVisible(true);
                    
               break;
               case "Parent":
               parentInput parentform = new parentInput();
               parentform.setVisible(true);
                    
               break;
               case "Teacher":
               teacherInput teacherform = new teacherInput();
               teacherform.setVisible(true);
                    
               break;
           default:
               break;
       }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int idSearch = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter the ID of the record you want to delete:"));
        deleteRecord(idSearch, currTable);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        

        createTable(currTable);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnLearnerTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLearnerTblActionPerformed
        
       currTable = "Learner"; 
       if(LogInForm.accessLevel.equals("Parent")){
        parentPrint(LogInForm.parentId);
       }
       else{
        printAll(currTable, cmbSorttbl.getSelectedIndex());
    }
    lblAgeCat.setVisible(false);
    lblProgressBar.setVisible(false);

    rgbAgeIntermediate.setVisible(false);
    rgbAgeSenior.setVisible(false);
    rgbAllAges.setVisible(false);
    rgbAgeFoundation.setVisible(false);
    prgEnrolled.setVisible(false);

        bClicked = false;
        //printAll(currTable);
        //System.out.println(LogInForm.accessLevel);
    }//GEN-LAST:event_btnLearnerTblActionPerformed

    private void btnParentTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParentTblActionPerformed
        lblAgeCat.setVisible(false);
        lblProgressBar.setVisible(false);

        rgbAgeIntermediate.setVisible(false);
        rgbAgeSenior.setVisible(false);
        rgbAllAges.setVisible(false);
        rgbAgeFoundation.setVisible(false);
        prgEnrolled.setVisible(false);
        
            bClicked = false;

        currTable = "Parent";
        printAll(currTable, cmbSorttbl.getSelectedIndex());
    }//GEN-LAST:event_btnParentTblActionPerformed

    private void btnTeacherTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherTblActionPerformed
        lblAgeCat.setVisible(false);
        lblProgressBar.setVisible(false);

        rgbAgeIntermediate.setVisible(false);
        rgbAgeSenior.setVisible(false);
        rgbAllAges.setVisible(false);
        rgbAgeFoundation.setVisible(false);
        prgEnrolled.setVisible(false);
        
            bClicked = false;

        currTable = "Teacher";
        printAll(currTable, cmbSorttbl.getSelectedIndex());
    }//GEN-LAST:event_btnTeacherTblActionPerformed

    
    private void rgbAllAgesActionPerformed(java.awt.event.ActionEvent evt) {     
        printDetailed(0, cmbSorttbl.getSelectedIndex());                                      
        
    }                                          

    private void rbgAgeFoundationActionPerformed(java.awt.event.ActionEvent evt) {                                                 
       
        printDetailed(1, cmbSorttbl.getSelectedIndex());
    }                                                

    private void rgbAgeIntermediateActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        
        printDetailed(2, cmbSorttbl.getSelectedIndex());
    }                                                  

    private void rgbAgeSeniorActionPerformed(java.awt.event.ActionEvent evt) {                                             
        
        printDetailed(3, cmbSorttbl.getSelectedIndex());
    }                                            

    private void btnLearnersSubActionPerformed(java.awt.event.ActionEvent evt) {       
        if(bClicked == false){
        lblAgeCat.setVisible(true);
        lblProgressBar.setVisible(true);

        rgbAllAges.setSelected(true);
        rgbAgeIntermediate.setVisible(true);
        rgbAgeSenior.setVisible(true);
        rgbAllAges.setVisible(true);
        rgbAgeFoundation.setVisible(true);
        prgEnrolled.setVisible(true);
            bClicked = true;

            currTable = "Learner";

            printDetailed(0, cmbSorttbl.getSelectedIndex());
           
            
    }
    else {
        lblAgeCat.setVisible(false);
        lblProgressBar.setVisible(false);

        rgbAgeIntermediate.setVisible(false);
        rgbAgeSenior.setVisible(false);
        rgbAllAges.setVisible(false);
        rgbAgeFoundation.setVisible(false);
        prgEnrolled.setVisible(false);

            bClicked = false;
            printAll(currTable, cmbSorttbl.getSelectedIndex());
    }                                        
       
    } 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLearnerTbl;
    private javax.swing.JButton btnParentTbl;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTeacherTbl;
    private javax.swing.JButton btnLearnersSub;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
   // private javax.swing.JTable jTable1;
    private static javax.swing.JTable jTable2;
    private static javax.swing.JComboBox<String> cmbSorttbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel lblAgeCat;
    private javax.swing.JLabel lblProgressBar;
    private javax.swing.JProgressBar prgEnrolled;
    private javax.swing.JRadioButton rgbAgeFoundation;
    private javax.swing.JRadioButton rgbAgeIntermediate;
    private javax.swing.JRadioButton rgbAgeSenior;
    private javax.swing.JRadioButton rgbAllAges;
    // End of variables declaration//GEN-END:variables

    private static void printDetailed(int ageCat, int sortType) {
        // if(LogInForm.accessLevel.equals("Parent")){}

        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem", "root", "root");

            String sql = "SELECT * FROM learnerDetails ";

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            DefaultTableModel model = null;

            model = new DefaultTableModel(
                    new String[] { "ID", "Learner Name", "Surname", "Date of Birth", "Gender", "Grade", "Age",
                            "Subject 1", "Subject 2", "Subject 3", "Subject 4", "Subject 5", "Subject 6", "Subject 7" },
                    0);

            if (result.next()) {
                int res = result.getInt(1);
                if (res >= 0) {
                    sql = "SELECT * FROM learnerDetails ";
                    switch (ageCat) {
                        case 0:

                            break;
                        case 1:
                            sql += "WHERE (Age BETWEEN 6 AND 9) ";
                            break;
                        case 2:
                            sql += "WHERE (Age BETWEEN 10 AND 14) ";
                            break;
                        case 3:
                            sql += "WHERE (Age BETWEEN 15 AND 17) ";
                            break;
                        default:
                            break;
                    }
                    if (LogInForm.accessLevel.equals("Parent")) {
                        if (ageCat > 0) {
                            sql += "AND (ParentID = " + LogInForm.parentId + ") ";
                        } else {
                            sql += "WHERE (ParentID = " + LogInForm.parentId + ") ";
                        }
                    }
                    switch (sortType) {
                        case 0:
                            sql += "ORDER BY ID ASC";
                            break;
                        case 1:
                            sql += "ORDER BY Name ASC";
                            break;
                        case 2:
                            sql += "ORDER BY Surname ASC";
                            break;
                        default:
                            break;
                    }
                    stmt = conn.createStatement();
                    ResultSet result2 = stmt.executeQuery(sql);

                    String idNo = "";
                    String name = "";
                    String surname = "";
                    String dateOBirth = "";
                    String gender = "";
                    String grade = "";
                    String age = "";
                    String subject1 = "";
                    String subject2 = "";
                    String subject3 = "";
                    String subject4 = "";
                    String subject5 = "";
                    String subject6 = "";
                    String subject7 = "";

                    while (result2.next()) {
                        idNo = result2.getString("ID");
                        name = result2.getString("Name");
                        surname = result2.getString("Surname");
                        dateOBirth = result2.getString("DateOfBirth");
                        gender = result2.getString("Gender");
                        grade = result2.getString("Grade");
                        age = result2.getString("Age");
                        subject1 = result2.getString("Subject1");
                        subject2 = result2.getString("Subject2");
                        subject3 = result2.getString("Subject3");
                        subject4 = result2.getString("Subject4");
                        subject5 = result2.getString("Subject5");
                        subject6 = result2.getString("Subject6");
                        subject7 = result2.getString("Subject7");
                        model.addRow(new Object[] { idNo, name, surname, dateOBirth, gender, grade, age, subject1,
                                subject2, subject3, subject4, subject5, subject6, subject7 });
                    }
                    // ID, ParentID, Names, Surname, DateOfBirth, Gender, Grade, Age, Subject1,
                    // Subject2, Subject3, Subject4, Subject5, Subject6, Subject7

                    jTable2.setModel(model);

                }
            }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "An error has occurred.");
            ex.printStackTrace();
        }
    }

    private static void printAll(String tableType, int sortType) {
        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerdetails";
                break;
            case "Parent":
                tableName = "parentdetails";
                break;
            case "Teacher":
                tableName = "teacherdetails";
                break;

            default:
                break;
        }

        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem", "root", "root");

            String sql = "SELECT * FROM " + tableName;

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            DefaultTableModel model = null;

            switch (tableType) {
                case "Learner":
                    model = new DefaultTableModel(
                            new String[] { "ID", "Learner Name", "Surname", "Date of Birth", "Gender", "Grade" }, 0);
                    break;
                case "Parent":
                    model = new DefaultTableModel(new String[] { "ID", "Parent Name", "Surname", "Contact Number",
                            "Address", "Number Of Children" }, 0);
                    break;
                case "Teacher":
                    model = new DefaultTableModel(new String[] { "ID", "Teacher Name", "Surname", "Contact Number" },
                            0);
                    break;

                default:
                    break;
            }

            if (result.next()) {
                int res = result.getInt(1);
                if (res >= 0) {
                    sql = "SELECT * FROM " + tableName;

                    if (LogInForm.accessLevel.equals("Parent")) {
                        sql += " WHERE (ParentID = " + LogInForm.parentId + ")";

                    }

                    switch (sortType) {
                        case 0:
                            sql += " ORDER BY ID ASC";
                            break;
                        case 1:
                            sql += " ORDER BY Name ASC";
                            break;
                        case 2:
                            sql += " ORDER BY Surname ASC";
                            break;
                        default:
                            break;
                    }

                    stmt = conn.createStatement();
                    ResultSet result2 = stmt.executeQuery(sql);

                    String idNo = "";
                    String name = "";
                    String surname = "";

                    switch (tableType) {
                        case "Learner":
                            model = new DefaultTableModel(new String[] { "ID", "Learner Name", "Surname",
                                    "Date of Birth", "Gender", "Grade" }, 0);

                            String dateOBirth = "";
                            String gender = "";
                            String grade = "";

                            while (result2.next()) {
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                dateOBirth = result2.getString("DateOfBirth");
                                gender = result2.getString("Gender");
                                grade = result2.getString("Grade");
                                model.addRow(new Object[] { idNo, name, surname, dateOBirth, gender, grade });
                            }

                            jTable2.setModel(model);

                            break;
                        case "Parent":

                            model = new DefaultTableModel(new String[] { "ID", "Parent Name", "Surname",
                                    "Contact Number", "Address", "Number Of Children" }, 0);

                            while (result2.next()) {
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                String contacts = result2.getString("ContactNum");
                                String address = result2.getString("Address");
                                String numChildren = result2.getString("NumOfChildren");
                                model.addRow(new Object[] { idNo, name, surname, contacts, address, numChildren });
                            }

                            jTable2.setModel(model);

                            break;
                        case "Teacher":
                            model = new DefaultTableModel(
                                    new String[] { "ID", "Teacher Name", "Surname", "Contact Number" }, 0);

                            while (result2.next()) {
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                String contacts = result2.getString("ContactNo");

                                model.addRow(new Object[] { idNo, name, surname, contacts });
                            }

                            jTable2.setModel(model);
                            break;

                        default:
                            break;
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "The record could not be found.");
                }
            }
            jTable2.setModel(model);
            conn.close();

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,
                    "Table not found. Please log in as Admin or ask an administrator to create the missing tables.");
            ex.printStackTrace();
        }
    }

    private static void sortPrintAll(String tableType, String sortType) {

        String sorting = "";
        switch (sortType) {
            case "Name":
                // if(currTable.equals("Teacher")){
                sorting = "ORDER BY Name ASC";

                // }
                // else{
                // sorting = "ORDER BY Name ASC";
                // }
                break;
            case "ID":
                sorting = "ORDER BY ID ASC";
                break;
            case "Surname":
                sorting = "ORDER BY Surname ASC";
                break;
            default:
                return;

        }
        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerdetails";
                break;
            case "Parent":
                tableName = "parentdetails";
                break;
            case "Teacher":
                tableName = "teacherdetails";
                break;

            default:
                break;
        }

        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem", "root", "root");

            String sql = "SELECT * FROM " + tableName;

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            DefaultTableModel model = null;

            switch (tableType) {
                case "Learner":
                    model = new DefaultTableModel(
                            new String[] { "ID", "Learner Name", "Surname", "Date of Birth", "Gender", "Grade" }, 0);
                    break;
                case "Parent":
                    model = new DefaultTableModel(new String[] { "ID", "Parent Name", "Surname", "Contact Number",
                            "Address", "Number Of Children" }, 0);
                    break;
                case "Teacher":
                    model = new DefaultTableModel(new String[] { "ID", "Teacher Name", "Surname", "Contact Number" },
                            0);
                    break;

                default:
                    break;
            }

            if (result.next()) {
                int res = result.getInt(1);
                if (res >= 0) {
                    sql = "SELECT * FROM " + tableName + " " + sorting;
                    // sql += sorting;
                    stmt = conn.createStatement();
                    ResultSet result2 = stmt.executeQuery(sql);

                    String idNo = "";
                    String name = "";
                    String surname = "";

                    switch (tableType) {
                        case "Learner":
                            model = new DefaultTableModel(new String[] { "ID", "Learner Name", "Surname",
                                    "Date of Birth", "Gender", "Grade" }, 0);

                            String dateOBirth = "";
                            String gender = "";
                            String grade = "";

                            while (result2.next()) {
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                dateOBirth = result2.getString("DateOfBirth");
                                gender = result2.getString("Gender");
                                grade = result2.getString("Grade");
                                model.addRow(new Object[] { idNo, name, surname, dateOBirth, gender, grade });
                            }

                            jTable2.setModel(model);

                            break;
                        case "Parent":

                            model = new DefaultTableModel(new String[] { "ID", "Parent Name", "Surname",
                                    "Contact Number", "Address", "Number Of Children" }, 0);

                            while (result2.next()) {
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                String contacts = result2.getString("ContactNum");
                                String address = result2.getString("Address");
                                String numChildren = result2.getString("NumOfChildren");
                                model.addRow(new Object[] { idNo, name, surname, contacts, address, numChildren });
                            }

                            jTable2.setModel(model);

                            break;
                        case "Teacher":
                            model = new DefaultTableModel(
                                    new String[] { "ID", "Teacher Name", "Surname", "Contact Number" }, 0);

                            while (result2.next()) {
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                String contacts = result2.getString("ContactNo");

                                model.addRow(new Object[] { idNo, name, surname, contacts });
                            }

                            jTable2.setModel(model);
                            break;

                        default:
                            break;
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "The record could not be found.");
                }
            }
            jTable2.setModel(model);
            conn.close();

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,
                    "Table not found. Please log in as Admin or ask an administrator to create the missing tables.");
            ex.printStackTrace();
        }
    }

    private static void sortParentPrint(int parentId, String sortType) {
        Connection conn = null;
        String sorting = "";
        switch (sortType) {
            case "Name":
                sorting = "ORDER BY Name ASC";
                break;
            case "ID":
                sorting = "ORDER BY ID ASC";
                break;
            case "Surname":
                sorting = "ORDER BY Surname ASC";
                break;
            default:
                return;

        }

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem", "root", "root");

            String sql = "SELECT ID, ParentID, Name, Surname, DateOfBirth, Gender, Grade FROM learnerDetails "
                    + "WHERE(ParentID = " + parentId + ") " + sorting;

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel(
                    new String[] { "Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade" },
                    0);

            while (result.next()) {
                String learnerID = String.valueOf(result.getInt("ID"));
                String parentID = String.valueOf(result.getInt("ParentID"));
                String name = result.getString("Name");
                String surname = result.getString("Surname");
                String birthdate = result.getString("DateOfBirth");
                String gender = result.getString("Gender");
                String grade = String.valueOf(result.getInt("Grade"));
                model.addRow(new Object[] { learnerID, parentID, name, surname, birthdate, gender, grade });
            }

            jTable2.setModel(model);

        } catch (Exception e) {

            e.printStackTrace();
        }
    }

    //// Sort parent print
    private static void parentPrint(int parentId) {
        Connection conn = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem", "root", "root");

            String sql = "SELECT ID, ParentID, Name, Surname, DateOfBirth, Gender, Grade FROM learnerDetails "
                    + "WHERE(ParentID = " + parentId + ")";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel(
                    new String[] { "Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade" },
                    0);

            while (result.next()) {
                String learnerID = String.valueOf(result.getInt("ID"));
                String parentID = String.valueOf(result.getInt("ParentID"));
                String name = result.getString("Name");
                String surname = result.getString("Surname");
                String birthdate = result.getString("DateOfBirth");
                String gender = result.getString("Gender");
                String grade = String.valueOf(result.getInt("Grade"));
                model.addRow(new Object[] { learnerID, parentID, name, surname, birthdate, gender, grade });
            }

            jTable2.setModel(model);

        } catch (Exception e) {

            e.printStackTrace();
        }
    }

    ///// DELETE METHOD
    private static void deleteRecord(int idNum, String tableType) {
        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerDetails";
                break;
            case "Parent":
                tableName = "parentDetails";
                break;
            case "Teacher":
                tableName = "teacherDetails";
                break;

            default:
                break;
        }

        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem", "root", "root");

            String sql = "SELECT COUNT(1) FROM " + tableName + " WHERE(ID = " + idNum + ")";

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            if (result.next()) {
                int res = result.getInt(1);
                if (res == 1) {
                    sql = "DELETE FROM " + tableName + " WHERE(ID = " + idNum + ")";
                    stmt = conn.createStatement();
                    int i = stmt.executeUpdate(sql);
                    JOptionPane.showMessageDialog(null, String.valueOf(i) + " was deleted.");
                } else {
                    JOptionPane.showMessageDialog(null, "The record could not be found.");
                }
            }
            conn.close();

            printAll(currTable, cmbSorttbl.getSelectedIndex());

                } catch (SQLException | ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(null, "An error has occurred.");
                    ex.printStackTrace();
                }  
    
    }

    

    //////////////Search
    private static void searchID(int idNum, String tableType){

        String tableName = "";
        switch (tableType) {
            case "Learner":
                tableName = "learnerDetails";
                break;
        case "Parent":
                tableName = "parentDetails";
                break;
        case "Teacher":
                tableName = "teacherDetails";
                break;
        
            default:
                break;
        } 

        Connection conn = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
    
                String sql = "SELECT COUNT(1) FROM " + tableName + " WHERE(ID = " + idNum + ")";
    
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery(sql);

                String idNo = "";
                String name = "";
                String surname = "";
                String dateOBirth = "";
                String gender = "";
                String grade = "";
                
                DefaultTableModel model = new DefaultTableModel(new String[]{"Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"}, 0);
                if(result.next()){
                    int res = result.getInt(1);
                    if(res == 1){
                        sql = "SELECT * FROM " + tableName + " WHERE(ID = " + idNum + ")";
                        stmt = conn.createStatement();
                        ResultSet result2 = stmt.executeQuery(sql);
                        switch (tableType) {
                            case "Learner":
                            model = new DefaultTableModel(new String[]{"ID", "Learner Name", "Surname",
                            "Date of Birth", "Gender", "Grade"}, 0);
                            
                            
                            

                            while(result2.next()){
                                idNo = result2.getString("ID");
                                name = result2.getString("Name");
                                surname = result2.getString("Surname");
                                dateOBirth = result2.getString("DateOfBirth");
                                gender = result2.getString("Gender");
                                grade = result2.getString("Grade");
                                model.addRow(new Object[]{idNo, name, surname, dateOBirth, gender, grade});
                            }
                        
                            jTable2.setModel(model);
                                break;
                        case "Parent":

                        model = new DefaultTableModel(new String[]{"ID", "Parent Name", "Surname",
                        "Contact Number", "Address", "Number Of Children"}, 0);

                        while(result2.next()){
                             idNo = result2.getString("ID");
                             name = result2.getString("Name");
                             surname = result2.getString("Surname");
                            String contacts = result2.getString("ContactNum");
                            String address = result2.getString("Address");
                            String numChildren = result2.getString("NumOfChildren");
                            model.addRow(new Object[]{idNo, name, surname, contacts, address, numChildren});
                        }
                    
                        jTable2.setModel(model);
          
           
                        break;
                        case "Teacher":
                        model = new DefaultTableModel(new String[]{"ID", "Teacher Name", "Surname",
                        "Contact Number"}, 0);
                       
                        while(result2.next()){
                            idNo = result2.getString("ID");
                            name = result2.getString("Name");
                            surname = result2.getString("Surname");
                            String contacts = result2.getString("ContactNo");
            
                            model.addRow(new Object[]{idNo, name, surname, contacts});
                        }
                    
                        jTable2.setModel(model);
                            
                                break;
                        
                            default:
                                break;
                        } 
                        
            
            
                    }
                    else {
                       JOptionPane.showMessageDialog(null, "The record could not be found."); 
                    }
                }
                    conn.close();
               
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Table not found. Please log in as Admin or ask an administrator to create the missing tables.");
                ex.printStackTrace();
            }  
    }


    /////////////IS NULL
    public static boolean isNull(String var) {
        if ((var == null) || (var != null && ("".equals(var)) )) {
            return true;
        }

        return false;
    }


    ////////////READ IN LEARNER

    public static void readInLearner(String id, String name, String surname, String dob, String gender, String grade, String parentID,
    String age, String sub1, String sub2, String sub3, String sub4, String sub5, String sub6, String sub7){
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");

           if (isNull(id) == true) {
            return;
            }  

            if (isNull(name) == true) {
                return;
            }

            if (isNull(surname) == true) {
                return;
            }

            if (isNull(dob) == true) {
                return;
            }

            if (isNull(gender) == true) {
                return;
            }

            if (isNull(grade) == true) {
                return;
            }
           
            if(isNull(parentID) == true){
                JOptionPane.showMessageDialog(null, "Enter an existing parent's Parent ID");
                return;

            }

            if (isNull(age) == true) {
                return;
                }  
    
            if (isNull(sub1) == true) {
                return;
                }

            if (isNull(sub2) == true) {
                return;
                }  
    
                if (isNull(sub3) == true) {
                    return;
                }
    
                if (isNull(sub4) == true) {
                    return;
                }
    
                if (isNull(sub5) == true) {
                    return;
                }
    
                if (isNull(sub6) == true) {
                    return;
                }
    
                if (isNull(sub7) == true) {
                    return;
                }


            PreparedStatement stmt=conn.prepareStatement("INSERT INTO learnerDetails(ID, Name, Surname, DateOfBirth, " + 
            "Gender, Grade, ParentID, Age, Subject1, Subject2, Subject3, Subject4, Subject5, Subject6, Subject7) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
           
            stmt.setString(1, id);
            stmt.setString(2, name);
            stmt.setString(3, surname);
            stmt.setString(4, dob);
            stmt.setString(5, gender);
            stmt.setString(6, grade);
            stmt.setString(7, parentID);
            stmt.setString(8, age);
            stmt.setString(9, sub1);
            stmt.setString(10, sub2);
            stmt.setString(11, sub3);
            stmt.setString(12, sub4);
            stmt.setString(13, sub5);
            stmt.setString(14, sub6);
            stmt.setString(15, sub7);
            
            int i=stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, i + " records inserted");
            conn.close();
             
            printAll(currTable, cmbSorttbl.getSelectedIndex());

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "An error has occurred");
            ex.printStackTrace();
        }

    }

    ////////////LOGIN FORM

        public static String logInSearch(String userNAME, String passWORD, String searchTable){

            if(userNAME.equals("admin") && passWORD.equals("admin")){
                return "Admin";
            }

            Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");

            String tableName = "";
        switch (searchTable) {
            
        case "Parent":
                tableName = "parentdetails";
                break;
        case "Teacher":
                tableName = "teacherdetails";
                break;
        case "Admin":
                JOptionPane.showMessageDialog(null, "Invalid username", "Access Denied", 0);
                return "Denied";

            default:
            return "Denied";
        }


            String sql = "SELECT COUNT(1), ID FROM " + tableName + " WHERE Username = '" + userNAME  + "' AND Password = '" + passWORD + "'";

            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sql);

            if(result.next()){
                int res = result.getInt(1);
                if(res == 1){

                    if(tableName.equals("parentdetails")){
                        LogInForm.parentId = result.getInt("ID");
                        conn.close();
                        return "Parent";
                    }
                    else if (tableName.equals("teacherdetails")){
                        conn.close();
                        return "Teacher";
                    }
                }

            else {
                JOptionPane.showMessageDialog(null, "Invalid username", "Access Denied", 0);
                return "Denied"; 
             }
         }
             conn.close();
        }
     catch (SQLException | ClassNotFoundException ex) {
         JOptionPane.showMessageDialog(null, "An error has occurred.");
         ex.printStackTrace();
     }  
     JOptionPane.showMessageDialog(null, "Invalid username", "Access Denied", 0);
                return "Denied";
        }



        public static void readInParent(String id, String name, String surname, String contactNum, String address, String numChildren, 
         String password, String username){
            Connection conn = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");

                if (isNull(id) == true) {
                    return;
                }

                if (isNull(name) == true) {
                    return;
                }
    
                if (isNull(surname) == true) {
                    return;
                }
    
                if (isNull(contactNum) == true) {
                    return;
                }         
    
                if (isNull(address) == true) {
                    return;
                }
    
                if (isNull(numChildren) == true) {
                    return;
                }
                
                if (isNull(password) == true) {
                    return;
                }

                if (isNull(username) == true) {
                    return;
                }

                PreparedStatement stmt=conn.prepareStatement("INSERT INTO parentDetails(ID, Name, Surname, ContactNum, Address, NumOfChildren, Password, Username) VALUES(?,?,?,?,?,?,?,?)");
                stmt.setString(1, id);
                stmt.setString(2, name);
                stmt.setString(3, surname);
                stmt.setString(4, contactNum);
                stmt.setString(5, address);
                stmt.setString(6, numChildren);
                stmt.setString(7, password);
                stmt.setString(8, username);


                int i=stmt.executeUpdate();
                JOptionPane.showMessageDialog(null, i + " records inserted");
                conn.close();
                 
                printAll(currTable, cmbSorttbl.getSelectedIndex());

            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "An error has occurred");
                ex.printStackTrace();
            }
    
        }

        public static void readInTeacher(String id, String name, String surname, String contactNum, String password, String username){
            Connection conn = null;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
    
                if (isNull(id) == true) {
                    return;
                }

                if (isNull(name) == true) {
                    return;
                }

                if (isNull(surname) == true) {
                    return;
                }

                if (isNull(contactNum) == true) {
                    return;
                }
              
                if (isNull(password) == true) {
                    return;
                }

                if (isNull(username) == true) {
                    return;
                }

                PreparedStatement stmt=conn.prepareStatement("INSERT INTO teacherDetails(ID, Name, Surname, ContactNo, Username, Password) VALUES(?,?,?,?,?,?)");
                stmt.setString(1, id);
                stmt.setString(2, name);
                stmt.setString(3, surname);
                stmt.setString(4, contactNum);
                stmt.setString(5, password);
                stmt.setString(6, username);


                int i=stmt.executeUpdate();
                JOptionPane.showMessageDialog(null, i + " records inserted");
                conn.close();
                 
                printAll(currTable, cmbSorttbl.getSelectedIndex());

            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "An error has occurred");
                ex.printStackTrace();
            }
    
        }


        public static void createTable (String tableType) {

            Connection conn = null;
    
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/schoolregistrationsystem","root","root");
    
                String sql = "";
                        //ID, ParentID, Name, Surname, DateOfBirth, Gender, Grade, Age, Subject1, Subject2, Subject3, Subject4, Subject5, Subject6, Subject7
                switch(tableType) {
                    case "Learner":
                        sql = "CREATE TABLE IF NOT EXISTS learnerDetails(" +
                        "ID INT AUTO_INCREMENT NOT NULL, ParentID INT, Name VARCHAR(45), Surname VARCHAR(100), DateOfBirth VARCHAR(45), Gender VARCHAR(45), Grade INT, Subject1 VARCHAR(45), " + 
                        " Subject2 VARCHAR(45), Subject3 VARCHAR(45), Subject4 VARCHAR(45), Subject5 VARCHAR(45), Subject6 VARCHAR(45), Subject7 VARCHAR(45), Age INT,  PRIMARY KEY(ID), FOREIGN KEY(ParentID) REFERENCES parentDetails(ID))";
                        break;
                    case "Parent":
                    //ID, Names, Surname, ContactNum, Address, NumOfChildren, Password, Username
                        sql = "CREATE TABLE IF NOT EXISTS parentDetails(" +
                        "ID INT AUTO_INCREMENT NOT NULL, Username VARCHAR(100) NOT NULL, Password VARCHAR(45) NOT NULL, Name VARCHAR(45), Surname VARCHAR(45), Address VARCHAR(45), ContactNum VARCHAR(45), NumOfChildren INT, PRIMARY KEY(ID), UNIQUE(Username))";
                        break;
                    case "Teacher":
                    //ID, Name, Surname, ContactNo, Username, Password
                        sql = "CREATE TABLE IF NOT EXISTS teacherDetails(" +
                        "ID INT AUTO_INCREMENT NOT NULL, Username VARCHAR(45) NOT NULL, Password VARCHAR(45) NOT NULL, Name VARCHAR(45), Surname VARCHAR(45), Address VARCHAR(45), ContactNo VARCHAR(45), PRIMARY KEY(ID), UNIQUE(Username))";
                        break;
                }
    
                Statement stmt = conn.createStatement();
            
                stmt.executeUpdate(sql);
    
                conn.close();  
            } catch (SQLException | ClassNotFoundException ex) {
                System.out.println("An error has occurred.");
                ex.printStackTrace();
            }
    
        }

        
}